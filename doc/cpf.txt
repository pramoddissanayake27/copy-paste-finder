*cpf.txt*	Plugin for finding copy/paste regions in code

cpf                                                  *cpf* *copy_paste_finder*
Last Change: 2018-03-05
For Vim version 8.0 and above


Overview                                |cpf-overview|
Requirements                            |cpf-requirements|
Installation                            |cpf-installation|
Usage                                   |cpf-usage|
Limitations                             |cpf-limitations|

==============================================================================
OVERVIEW                                                        *cpf-overview*

CPF (Copy/Paste Finder) makes PMD/CPD's or Sloppy's output easier to navigate.
CPF shows detected copied/pasted regions in vertical splits and highlights
the found regions.


==============================================================================
REQUIREMENTS                                                *cpf-requirements*

CPF depends on PMD or Sloppy software and needs Vim's quickfix feature.

PMD/CPD
-------
PMD's Copy/Paste Detector (CPD) finds duplicated code.
PMD is an extensible cross-language static code analyzer.
PMD is an open source project.

see https://pmd.github.io/ to download it and for more info.

Sloppy
------
Sloppy scans all source code in a directory and generates a report on how
'sloppy' the code is... sloppiness being a measurement of a repetitive code
style: under abstraction (copy / pasting) and over abstraction (pointless
complexity).

Sloppy is written by Wouter van Oortmerssen.

see http://strlen.com/sloppy/ to download it and for more info.

Tested with Vim version 8.0 and above; it may work with older vim, but not
verified.  This plugin only works if 'compatible' is not set.
{Vi does not have the required features.}


==============================================================================
INSTALLATION                                                *cpf-installation*

  - copy pmdcpd.vim to the compiler directory
  - copy sloppy.vim to the compiler directory
  - copy cpf.vim to plugin directory
      i.e. inside $HOME/vimfiles (or runtime directory):
        compiler/pmdcpd.vim
        compiler/sloppy.vim
        plugin/cpf.vim
  - ensure java environment or sloppy executable in path
  - ensure cpd (e.g. cpd.bat) is found in the path
  - ensure cpd or sloppy runs correctly

The Sloppy release has sloppy.exe which runs on windows.
However for the original sloppy, a batch file is required.
For example: sloppy.bat
    >> @echo off
    >> echo. | sloppy %*
Above batch file helps sloppy to exit---otherwise it waits for
enter key to be pressed.


==============================================================================
USAGE                                                              *cpf-usage*

Steps below targets Microsoft Windows. Similar steps can be used with
Linux or Unix* operating systems.

  - Run gvim to open a new gvim window
  - Ensure current working directory is correct in gvim
  - During an editing session:
      :compiler pmdcpd
      :set makeprg=cpd.bat\ --minimum-tokens\ 20\ --language\ cpp\ --files\ .
      :make!
      :CpfNext

Or following can be used with sloppy:
      :compiler sloppy
      :makeprg=sloppy.bat
      :make!
      :CpfNext

The command CpfNext can be repeated to see more duplicates

With Vim 8.0, if ':make!' is called then script automatically reloads the
quickfix list.

With Vim 7.4, automatic reloading of quickfix list is not possible after
':make!' is called. The workaround is to call the command below to reload:

      :call Cpf_LoadQflist()

This plugin provides Cpf_Close() and Cpf_Reset().
Cpf_Close() resets the window options used by the plugin.
Cpf_Reset() removes splits and reverts to original window width.
Cpf_Previous() also available, but only partially functional.

Mapping ~
       
Following commands can be used to map a key to Cpf_Next.
For example to use function key 'F4' use the commands below:
  :unmap <F4>
  :nmap <F4> :CpfNext<CR>
or
  :nmap <F4> :call Cpf_Next()<CR>

==============================================================================
LIMITATIONS                                                  *cpf-limitations*

  - can only see two windows with a (vertical) split at a time
  - yet to work along with other plugins (e.g. taglist, nerdtree...)
  - yet to support more windows; now only 2 (see wincount)
  - yet to support showing previous duplicate (opposite of Cpf_Next())
  - silent, normal or execute may be redundant in some cases
  - need to skip lines with no code or lines with comment only
  - deciding whether to save buffers before jumping to next section
  - if quickfix windows is visible may need to scroll/redraw
  - may need to check and add ':noautocmd' to wincmd


==============================================================================

vim:tw=78:ft=help:ts=8:
